#include <SPI.h>
#include <MFRC522.h>

// Define pins for the RFID module
#define RST_PIN 9   // Reset pin
#define SS_PIN 10   // Slave select pin

// Define pins for other components
#define RELAY_PIN 7        // Relay pin
#define GREEN_LED_PIN 4  // Green LED for access granted
#define RED_LED_PIN 5     // Red LED for access denied
#define BUZZER_PIN 6       // Buzzer pin

MFRC522 mfrc522(SS_PIN, RST_PIN); // Create instance of the RFID module

// List of authorized card IDs
String authorizedCards[] = {
  "12345678", // Replace with actual card UID
  "87654321",
  "4FC5131E"  // Add more authorized UIDs as needed
};

void setup() {
  Serial.begin(9600);
  while (!Serial); // Wait for Serial Monitor to open

  SPI.begin();
  mfrc522.PCD_Init();

  pinMode(RELAY_PIN, OUTPUT);
  pinMode(GREEN_LED_PIN, OUTPUT);
  pinMode(RED_LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);

  // Initial states
  digitalWrite(RELAY_PIN, HIGH);     // Assume active-low relay: Locked state
  digitalWrite(GREEN_LED_PIN, LOW); // Green LED off
  digitalWrite(RED_LED_PIN, HIGH);  // Red LED on (locked state)
  digitalWrite(BUZZER_PIN, LOW);

  Serial.println("Place your card near the reader...");
}

void loop() {
  if (!mfrc522.PICC_IsNewCardPresent() || !mfrc522.PICC_ReadCardSerial()) {
    return;
  }

  String cardUID = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    cardUID += String(mfrc522.uid.uidByte[i], HEX);
  }
  cardUID.toUpperCase();

  Serial.print("Card UID: ");
  Serial.println(cardUID);

  if (isAuthorized(cardUID)) {
    Serial.println("Access Granted");
    grantAccess();
  } else {
    Serial.println("Access Denied");
    denyAccess();
  }

  mfrc522.PICC_HaltA();
}

bool isAuthorized(String cardUID) {
  for (String id : authorizedCards) {
    if (cardUID == id) {
      return true;
    }
  }
  return false;
}

void grantAccess() {
  digitalWrite(RELAY_PIN, LOW);       // Unlock (active-low relay)
  digitalWrite(GREEN_LED_PIN, HIGH); // Turn on green LED
  digitalWrite(RED_LED_PIN, LOW);    // Turn off red LED
  tone(BUZZER_PIN, 1000, 200);       // Beep buzzer

  delay(5000); // Keep unlocked for 5 seconds

  digitalWrite(RELAY_PIN, HIGH);     // Lock
  digitalWrite(GREEN_LED_PIN, LOW);  // Turn off green LED
  digitalWrite(RED_LED_PIN, HIGH);   // Turn on red LED
}

void denyAccess() {
  for (int i = 0; i < 3; i++) {
    digitalWrite(RED_LED_PIN, HIGH); // Flash red LED
    tone(BUZZER_PIN, 500, 200);      // Beep buzzer
    delay(200);
    digitalWrite(RED_LED_PIN, LOW);
    delay(200);
  }
}
